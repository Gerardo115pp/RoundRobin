{"version":3,"sources":["clases/Point.js","enums.js","clases/Process.js","clases/Queue.js","App.js","serviceWorker.js","index.js"],"names":["Point","x","y","offset","dx","dy","X","Y","this","colors","schualding_algorithms","processing_states","cpu_states","Process","coords","process_name","updateProgress","progress","speed","status","name","procesess","random_generator","constant","random_number","Math","random","floor","QNode","content","next","previous","CircularQueue","enqueue","new_node","start","end","length","peek","circularDequeue","front","clear","isEmpty","dequeue","App","isMouseOverTitle","useRef","componentDidMount","processes_list","stopped","component_data","start_processing_time","procsessing_queue","scheduling_algorithm","useState","cpu_state","useCpuState","useEffect","current","canvas","document","getElementById","h","push","width","increase_factor","getContext","clearRect","height","drawProcesses","getCurrentAlgorithm","getRangedRandom","ceil","dequeueProcessSafly","pqueue","process","updateInformation","data","time_element","process_element","progress_element","innerText","Date","now","total","toFixed","getAssigneTitle","algorithm_code","new_title","startShortestFirst","a","p_list","processes_to_add","current_process","HandelStartClick","Promise","resolve","setTimeout","func","startRoundRobin","alert","handelAlgorithmOptionClick","e","element","target","parseInt","getAttribute","querySelector","stop","new_state","sort","b","elapsed_counts","canvas_context","undefined","forEach","p","strokeStyle","getProcessColor","beginPath","rect","stroke","fillStyle","fillRect","handleTitleHover","style","display","id","onMouseEnter","onMouseLeave","className","onClick","algorithmValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e695b3cc.chunk.js","sourcesContent":["class Point\r\n{\r\n    constructor( x, y)\r\n    {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n\r\n    offset = ( dx, dy) => {\r\n        this.X += dx;\r\n        this.Y += dy;\r\n    }\r\n}\r\n\r\nexport default Point;","export const colors = {\r\n    MAIN_COLOR: \"#282c34\",\r\n    DARK_BACKGROUND: \"#161616\",\r\n    LIGHT_BACKGROUND: \"#888888\",\r\n    ROSE: \"#d10050\",\r\n    HOVER_ROSE: \"#e9206d\",\r\n    CYAN: \"#00cee9\",\r\n    GREEN: \"#4bd84b\"\r\n}\r\n\r\nexport const schualding_algorithms = {\r\n    ROUND_ROBIN: 0,\r\n    SHORTEST_FIRST: 1\r\n}\r\n\r\nexport const processing_states = {\r\n    CREATED: 0,\r\n    ADDED: 1,\r\n    PROCESSING: 2,\r\n    FINISHED: 3\r\n}\r\n\r\nexport const cpu_states = {\r\n    FREE: 0,\r\n    BUSY: 1\r\n}","import Point from './Point';\r\nimport { processing_states } from '../enums';\r\n\r\nclass Process\r\n{\r\n    static procesess = 0;\r\n\r\n    static random_generator = (constant=100) => {\r\n        let random_number = Math.random() * constant;\r\n        return random_number >= 10 ?  Math.floor(random_number) : 10;\r\n    }\r\n\r\n    constructor( coords, process_name=null)\r\n    {\r\n        this.progress = 0;\r\n        this.status = processing_states.CREATED;\r\n        this.name = process_name !== null ? process_name : `Proceso ${Process.procesess++}`;\r\n        this.speed = Process.random_generator();\r\n        this.coords = new Point(coords.x, coords.y);\r\n    }\r\n\r\n    updateProgress = () => {\r\n        this.progress++;\r\n        if(this.progress === this.speed)\r\n        {\r\n            this.status = processing_states.FINISHED;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Process;","class QNode{\r\n    constructor(content, next=null, previous=null)\r\n    {\r\n        this.content = content;\r\n        this.next = next;\r\n        this.previous = previous;\r\n    }\r\n}\r\n\r\nclass CircularQueue\r\n{\r\n    constructor()\r\n    {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue = content => {\r\n        const new_node = new QNode(content);\r\n        if(this.start === null)\r\n        {\r\n            this.start = new_node;\r\n            this.end = new_node;\r\n        }\r\n        else\r\n        {\r\n            new_node.next = this.end;\r\n            this.end.previous = new_node;\r\n            this.end = new_node\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    peek = () => {\r\n        return this.start.content;\r\n    }\r\n\r\n    circularDequeue = () => {\r\n        if(this.start !== null && this.start.previous !== null)\r\n        {\r\n            const front = this.start;\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            this.end.previous = front;\r\n            front.next = this.end;\r\n            front.previous = null;\r\n            this.end = front;\r\n            return front.content;\r\n        }\r\n        else if(this.start.previous === null)\r\n        {\r\n            return this.start.content;\r\n        }\r\n    }\r\n\r\n    clear = () => {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    isEmpty = () => {\r\n        return this.start === null;\r\n    }\r\n\r\n    dequeue = () => {\r\n        const front = this.start;\r\n        if(front.previous === null)\r\n        {\r\n            this.start = null;\r\n            this.end = null;\r\n            return front.content;\r\n        }\r\n        else if(this.start !== null)\r\n        {\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            return front.content;\r\n        }\r\n        this.length += this.length === 0 ? 0 : 1;\r\n    }\r\n}\r\n\r\nexport default CircularQueue;","import React, { useRef, useEffect, useState } from 'react';\nimport Process from './clases/Process';\nimport CircularQueue from './clases/Queue';\nimport { colors, processing_states, cpu_states, schualding_algorithms } from './enums';\nimport './App.css';\n\nfunction App() {\n  const isMouseOverTitle = useRef(false);\n  const componentDidMount = useRef(false);\n  const processes_list = useRef([]);\n  const stopped = useRef(false);\n  const component_data = useRef({\n    start_processing_time: 0\n  })\n  // const waiter = useRef(new Worker('./workers/waiter.js'));\n  // waiter.current.onmessage()\n  const procsessing_queue = useRef(new CircularQueue());\n  const general_quantum = 20; //this number represents seconds\n  const scheduling_algorithm = useRef(schualding_algorithms.SHORTEST_FIRST);\n  const [ cpu_state, useCpuState ] = useState(cpu_states.FREE);\n\n  \n  useEffect(() => {\n    if(!componentDidMount.current)\n    {\n      // componentDidMount behavior\n      const canvas = document.getElementById(\"graphic\");\n      componentDidMount.current = true;\n      const increase_factor = 70,\n            coords = { x: increase_factor, y: 130};\n      processes_list.current = [];\n      for(let h=0; h < 20; h++)\n      {\n        processes_list.current.push(new Process(coords));\n        coords.x +=  increase_factor;\n      }\n      // console.log(processes_list.current);\n      canvas.width = processes_list.current.length * increase_factor + (increase_factor * 2);\n      const canvas_context = canvas.getContext('2d');\n      canvas_context.clearRect(0, 0, canvas.width, canvas.height);\n      drawProcesses(canvas);\n    }\n    if(cpu_state === cpu_states.BUSY)\n    {\n      getCurrentAlgorithm()();\n    }\n  })\n\n  const getProcessColor = process => {\n    switch(process.status){\n      case processing_states.CREATED:\n        return colors.LIGHT_BACKGROUND;\n      case processing_states.ADDED:\n        return colors.CYAN;\n      case processing_states.PROCESSING:\n        return colors.ROSE;\n      case processing_states.FINISHED:\n        return colors.GREEN;\n      default:\n        return colors.MAIN_COLOR;\n    }\n  }\n\n  const getRangedRandom = constant => {\n    return Math.ceil(Math.random()*constant);\n  }\n\n  const dequeueProcessSafly = pqueue => {\n    let process = null;\n    do{\n      if(!pqueue.isEmpty())\n      {\n        if(pqueue.peek().status !== processing_states.FINISHED)\n        {\n          process = pqueue.circularDequeue();\n        }\n        else\n        {\n          process = pqueue.dequeue();\n        }\n      }\n      else{\n        return false;\n      } \n    }while( process.status === processing_states.FINISHED)\n    return process;\n  }\n\n  const updateInformation = data => {\n    const { start_processing_time } = component_data.current;\n    const time_element = document.getElementById('time-il'),\n          process_element = document.getElementById(\"proceso-il\"),\n          progress_element  = document.getElementById(\"progress-il\");\n    time_element.innerText = `  Tiempo: ${Math.floor((Date.now()-start_processing_time)/1000)}s`;\n    process_element.innerText = ` Proceso: ${data.process_name}`;\n    progress_element.innerText = `  Progreso: ${(data.progress/data.total*100).toFixed(1)}%`;\n  }\n\n  const getAssigneTitle = algorithm_code => {\n    let new_title = \"\";\n    switch(algorithm_code)\n    {\n      case schualding_algorithms.ROUND_ROBIN:\n        new_title = \"ACTIVIDAD 2 ROUND ROBIN\";\n        break;\n      case schualding_algorithms.SHORTEST_FIRST:\n        new_title = \"ACTIVIDAD 3 SHORTEST FIRST\";\n        break;\n      default:\n        new_title = \"TAREA RANDOM\";\n        break;\n    }\n    return new_title;\n  }\n\n  const startShortestFirst = async () => {\n    const { current:p_list } = processes_list;\n    if(stopped.current)\n    {\n      stopped.current = false;\n      return;\n    }\n    if(procsessing_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && procsessing_queue.current.length !== p_list.length)\n      {\n        p_list[procsessing_queue.current.length].status = processing_states.ADDED;\n        procsessing_queue.current.enqueue(p_list[procsessing_queue.current.length]);\n        processes_to_add--;\n      }\n    }\n    let current_process = dequeueProcessSafly(procsessing_queue.current);\n    if (current_process === false)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    current_process.status = processing_states.PROCESSING;\n    while(current_process.status !== processing_states.FINISHED)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      current_process.updateProgress();\n      drawProcesses();\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    current_process.status = current_process.status !== processing_states.FINISHED ? processing_states.ADDED : current_process.status;\n    return startShortestFirst();\n  }\n\n  const getCurrentAlgorithm = () => {\n    const { current:algorithm_code } = scheduling_algorithm;\n    let func;\n    switch(algorithm_code)\n    {\n      case schualding_algorithms.ROUND_ROBIN:\n        func = startRoundRobin;\n        break;\n      case schualding_algorithms.SHORTEST_FIRST:\n        func = startShortestFirst;\n        break;\n      default:\n        func = () => alert(\"puto el que lo lea\");\n        break;\n    } \n    return func;\n  }\n\n  const handelAlgorithmOptionClick = e => {\n    const element = e.target;\n    const algorithm_code = parseInt(element.getAttribute('algorithmvalue'));\n    scheduling_algorithm.current = algorithm_code;\n    document.querySelector(\"#title h3\").innerText = getAssigneTitle(algorithm_code);\n  }\n\n  const HandelStartClick = (stop=true) => {\n    const new_state = cpu_state === cpu_states.FREE ? cpu_states.BUSY : cpu_states.FREE;\n    \n    if(procsessing_queue.current.length !== 0)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n    }\n    if(scheduling_algorithm.current === schualding_algorithms.SHORTEST_FIRST)\n    {\n      processes_list.current.sort((a,b) =>  a.speed - b.speed);\n    }\n\n    if(new_state === cpu_states.BUSY)\n    {\n      component_data.current.start_processing_time = Date.now();\n    }\n    else if(stop) {\n      stopped.current = true;\n    }\n    useCpuState(new_state);\n  }\n\n  const startRoundRobin = async () => {\n    const { current:p_list } = processes_list;\n    if(stopped.current)\n    {\n      stopped.current = false;\n      return;\n    }\n    if(procsessing_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && procsessing_queue.current.length !== p_list.length)\n      {\n        p_list[procsessing_queue.current.length].status = processing_states.ADDED;\n        procsessing_queue.current.enqueue(p_list[procsessing_queue.current.length]);\n        processes_to_add--;\n      }\n    }\n    let current_process = dequeueProcessSafly(procsessing_queue.current);\n    if (current_process === false)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    current_process.status = processing_states.PROCESSING;\n    let elapsed_counts = 0;\n    while(elapsed_counts < general_quantum)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      if(current_process.status !== processing_states.FINISHED)\n      {\n        current_process.updateProgress();\n      }\n      elapsed_counts++;\n      drawProcesses();\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    current_process.status = current_process.status !== processing_states.FINISHED ? processing_states.ADDED : current_process.status;\n    return startRoundRobin();\n  }\n\n  const drawProcesses = canvas => {\n    canvas = canvas === undefined ? document.getElementById(\"graphic\") : canvas;\n    const canvas_context = canvas.getContext('2d');\n    processes_list.current.forEach(p => {\n      canvas_context.strokeStyle = getProcessColor(p);\n      canvas_context.beginPath();\n      canvas_context.rect(p.coords.X, (p.coords.Y - p.speed), 30, p.speed);\n      canvas_context.stroke();\n      if(p.progress > 0)\n      {\n        canvas_context.fillStyle = canvas_context.strokeStyle;\n        canvas_context.fillRect(p.coords.X, (p.coords.Y - p.speed), 30, p.progress);\n      }\n    })\n  }\n\n  const handleTitleHover = e => {\n    const subtitule = document.getElementById('subtitule');\n    subtitule.style.display = isMouseOverTitle.current ? \"none\" : \"block\";\n    isMouseOverTitle.current = !isMouseOverTitle.current \n  }\n\n  return (\n    <div id=\"main-container\">\n      <div onMouseEnter={handleTitleHover} onMouseLeave={handleTitleHover} id=\"title\">\n        <h3>{getAssigneTitle(scheduling_algorithm.current)}</h3>\n        <span id=\"subtitule\">por: <br/>&emsp;-&ensp;Gerardo Rodriguez Sanchez<br/><br/>&emsp;-&ensp;Luis Antonio Jimenez Mendoza<br/><br/>&emsp;-&ensp;Luis Elogio (aka el foris)</span>\n      </div>\n      <div id=\"graphic-container\">\n        <div id=\"colors-legend\"></div>\n        <canvas id=\"graphic\"></canvas>\n      </div>\n      <div id=\"info-container\">\n        <div className=\"infoblock\">\n          <span className=\"infoblock-title\">Information</span>\n          <div className=\"infoblock-labels\">\n            <span id=\"time-il\" className=\"infoblock-label\">Tiempo:</span>\n            <span id=\"quantum-il\" className=\"infoblock-label\">Quantum: {general_quantum}</span>\n            <span id=\"proceso-il\" className=\"infoblock-label\">Proceso:</span>\n            <span id=\"progress-il\" className=\"infoblock-label\">Progreso:</span>\n          </div>\n        </div>\n        <div className=\"infoblock\" id=\"algorithms-selector\">\n          <span className=\"infoblock-title\">Algoritmos</span>\n          <div className=\"infoblock-labels\">\n            <div onClick={handelAlgorithmOptionClick} algorithmValue={schualding_algorithms.ROUND_ROBIN} className=\"infoblock-label algorithm-option\">round robin</div>\n            <div onClick={handelAlgorithmOptionClick} algorithmValue={schualding_algorithms.SHORTEST_FIRST} className=\"infoblock-label algorithm-option\">shortest first</div>\n          </div>\n        </div>\n      </div>\n      <div id=\"controls-container\">\n        <i onClick={HandelStartClick} id=\"play-control\" className={`fas fa-${cpu_state === cpu_states.FREE ? 'play' : 'pause'}`}></i>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}