{"version":3,"sources":["clases/Point.js","enums.js","clases/Process.js","clases/Queue.js","App.js","serviceWorker.js","index.js"],"names":["Point","x","y","offset","dx","dy","X","Y","this","colors","processing_states","cpu_states","Process","coords","process_name","updateProgress","progress","speed","status","name","procesess","random_generator","constant","random_number","Math","random","floor","QNode","content","next","previous","CircularQueue","enqueue","new_node","start","end","length","peek","circularDequeue","front","clear","isEmpty","dequeue","App","isMouseOverTitle","useRef","componentDidMount","processes_list","stopped","component_data","start_processing_time","procsessing_queue","useState","cpu_state","useCpuState","useEffect","current","canvas","document","getElementById","h","push","width","increase_factor","getContext","clearRect","height","drawProcesses","startRoundRobin","dequeueProcessSafly","pqueue","process","updateInformation","data","time_element","process_element","progress_element","innerText","Date","now","total","toFixed","HandelStartClick","stop","new_state","a","p_list","processes_to_add","ceil","current_process","elapsed_counts","Promise","resolve","setTimeout","canvas_context","undefined","forEach","p","strokeStyle","getProcessColor","beginPath","rect","stroke","fillStyle","fillRect","handleTitleHover","e","style","display","id","onMouseEnter","onMouseLeave","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee562f4d.chunk.js","sourcesContent":["class Point\r\n{\r\n    constructor( x, y)\r\n    {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n\r\n    offset = ( dx, dy) => {\r\n        this.X += dx;\r\n        this.Y += dy;\r\n    }\r\n}\r\n\r\nexport default Point;","export const colors = {\r\n    MAIN_COLOR: \"#282c34\",\r\n    DARK_BACKGROUND: \"#161616\",\r\n    LIGHT_BACKGROUND: \"#888888\",\r\n    ROSE: \"#d10050\",\r\n    HOVER_ROSE: \"#e9206d\",\r\n    CYAN: \"#00cee9\",\r\n    GREEN: \"#4bd84b\"\r\n}\r\n\r\nexport const processing_states = {\r\n    CREATED: 0,\r\n    ADDED: 1,\r\n    PROCESSING: 2,\r\n    FINISHED: 3\r\n}\r\n\r\nexport const cpu_states = {\r\n    FREE: 0,\r\n    BUSY: 1\r\n}","import Point from './Point';\r\nimport { processing_states } from '../enums';\r\n\r\nclass Process\r\n{\r\n    static procesess = 0;\r\n\r\n    static random_generator = (constant=100) => {\r\n        let random_number = Math.random() * constant;\r\n        return random_number >= 10 ?  Math.floor(random_number) : 10;\r\n    }\r\n\r\n    constructor( coords, process_name=null)\r\n    {\r\n        this.progress = 0;\r\n        this.status = processing_states.CREATED;\r\n        this.name = process_name !== null ? process_name : `Proceso ${Process.procesess++}`;\r\n        this.speed = Process.random_generator();\r\n        this.coords = new Point(coords.x, coords.y);\r\n    }\r\n\r\n    updateProgress = () => {\r\n        this.progress++;\r\n        if(this.progress === this.speed)\r\n        {\r\n            this.status = processing_states.FINISHED;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Process;","class QNode{\r\n    constructor(content, next=null, previous=null)\r\n    {\r\n        this.content = content;\r\n        this.next = next;\r\n        this.previous = previous;\r\n    }\r\n}\r\n\r\nclass CircularQueue\r\n{\r\n    constructor()\r\n    {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue = content => {\r\n        const new_node = new QNode(content);\r\n        if(this.start === null)\r\n        {\r\n            this.start = new_node;\r\n            this.end = new_node;\r\n        }\r\n        else\r\n        {\r\n            new_node.next = this.end;\r\n            this.end.previous = new_node;\r\n            this.end = new_node\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    peek = () => {\r\n        return this.start.content;\r\n    }\r\n\r\n    circularDequeue = () => {\r\n        if(this.start !== null && this.start.previous !== null)\r\n        {\r\n            const front = this.start;\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            this.end.previous = front;\r\n            front.next = this.end;\r\n            front.previous = null;\r\n            this.end = front;\r\n            return front.content;\r\n        }\r\n        else if(this.start.previous === null)\r\n        {\r\n            return this.start.content;\r\n        }\r\n    }\r\n\r\n    clear = () => {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    isEmpty = () => {\r\n        return this.start === null;\r\n    }\r\n\r\n    dequeue = () => {\r\n        const front = this.start;\r\n        if(front.previous === null)\r\n        {\r\n            this.start = null;\r\n            this.end = null;\r\n            return front.content;\r\n        }\r\n        else if(this.start !== null)\r\n        {\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            return front.content;\r\n        }\r\n        this.length += this.length === 0 ? 0 : 1;\r\n    }\r\n}\r\n\r\nexport default CircularQueue;","import React, { useRef, useEffect, useState } from 'react';\nimport Process from './clases/Process';\nimport CircularQueue from './clases/Queue';\nimport { colors, processing_states, cpu_states } from './enums';\nimport './App.css';\n\nfunction App() {\n  const isMouseOverTitle = useRef(false);\n  const componentDidMount = useRef(false);\n  const processes_list = useRef([]);\n  const stopped = useRef(false);\n  const component_data = useRef({\n    start_processing_time: 0\n  })\n  // const waiter = useRef(new Worker('./workers/waiter.js'));\n  // waiter.current.onmessage()\n  const procsessing_queue = useRef(new CircularQueue());\n  const general_quantum = 20; //this number represents seconds\n  const [ cpu_state, useCpuState ] = useState(cpu_states.FREE);\n\n  \n  useEffect(() => {\n    if(!componentDidMount.current)\n    {\n      // componentDidMount behavior\n      const canvas = document.getElementById(\"graphic\");\n      componentDidMount.current = true;\n      const increase_factor = 70,\n            coords = { x: increase_factor, y: 130};\n      processes_list.current = [];\n      for(let h=0; h < 20; h++)\n      {\n        processes_list.current.push(new Process(coords));\n        coords.x +=  increase_factor;\n      }\n      // console.log(processes_list.current);\n      canvas.width = processes_list.current.length * increase_factor + (increase_factor * 2);\n      const canvas_context = canvas.getContext('2d');\n      canvas_context.clearRect(0, 0, canvas.width, canvas.height);\n      drawProcesses(canvas);\n    }\n    if(cpu_state === cpu_states.BUSY)\n    {\n      startRoundRobin();\n    }\n  })\n\n  const getProcessColor = process => {\n    switch(process.status){\n      case processing_states.CREATED:\n        return colors.LIGHT_BACKGROUND;\n      case processing_states.ADDED:\n        return colors.CYAN;\n      case processing_states.PROCESSING:\n        return colors.ROSE;\n      case processing_states.FINISHED:\n        return colors.GREEN;\n      default:\n        return colors.MAIN_COLOR;\n    }\n  }\n\n\n\n  const getRangedRandom = constant => {\n    return Math.ceil(Math.random()*constant);\n  }\n\n  const dequeueProcessSafly = pqueue => {\n    let process = null;\n    do{\n      if(!pqueue.isEmpty())\n      {\n        if(pqueue.peek().status !== processing_states.FINISHED)\n        {\n          process = pqueue.circularDequeue();\n        }\n        else\n        {\n          process = pqueue.dequeue();\n        }\n      }\n      else{\n        return false;\n      } \n    }while( process.status === processing_states.FINISHED)\n    return process;\n  }\n\n  const updateInformation = data => {\n    const { start_processing_time } = component_data.current;\n    const time_element = document.getElementById('time-il'),\n          process_element = document.getElementById(\"proceso-il\"),\n          progress_element  = document.getElementById(\"progress-il\");\n    time_element.innerText = `  Tiempo: ${Math.floor((Date.now()-start_processing_time)/1000)}s`;\n    process_element.innerText = ` Proceso: ${data.process_name}`;\n    progress_element.innerText = `  Progreso: ${(data.progress/data.total*100).toFixed(1)}%`;\n  }\n\n  const HandelStartClick = (stop=true) => {\n    const new_state = cpu_state === cpu_states.FREE ? cpu_states.BUSY : cpu_states.FREE;\n    \n    if(procsessing_queue.current.length !== 0)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n    }\n\n    if(new_state === cpu_states.BUSY)\n    {\n      component_data.current.start_processing_time = Date.now();\n    }\n    else if(stop) {\n      stopped.current = true;\n    }\n    useCpuState(new_state);\n  }\n\n  const startRoundRobin = async () => {\n    const { current:p_list } = processes_list;\n    if(stopped.current)\n    {\n      stopped.current = false;\n      return;\n    }\n    if(procsessing_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && procsessing_queue.current.length !== p_list.length)\n      {\n        p_list[procsessing_queue.current.length].status = processing_states.ADDED;\n        procsessing_queue.current.enqueue(p_list[procsessing_queue.current.length]);\n        processes_to_add--;\n      }\n    }\n    let current_process = dequeueProcessSafly(procsessing_queue.current);\n    if (current_process === false)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    current_process.status = processing_states.PROCESSING;\n    let elapsed_counts = 0;\n    while(elapsed_counts < general_quantum)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      if(current_process.status !== processing_states.FINISHED)\n      {\n        current_process.updateProgress();\n      }\n      elapsed_counts++;\n      drawProcesses();\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    current_process.status = current_process.status !== processing_states.FINISHED ? processing_states.ADDED : current_process.status;\n    return startRoundRobin();\n  }\n\n  const drawProcesses = canvas => {\n    canvas = canvas === undefined ? document.getElementById(\"graphic\") : canvas;\n    const canvas_context = canvas.getContext('2d');\n    processes_list.current.forEach(p => {\n      canvas_context.strokeStyle = getProcessColor(p);\n      canvas_context.beginPath();\n      canvas_context.rect(p.coords.X, (p.coords.Y - p.speed), 30, p.speed);\n      canvas_context.stroke();\n      if(p.progress > 0)\n      {\n        canvas_context.fillStyle = canvas_context.strokeStyle;\n        canvas_context.fillRect(p.coords.X, (p.coords.Y - p.speed), 30, p.progress);\n      }\n    })\n  }\n\n  const handleTitleHover = e => {\n    const subtitule = document.getElementById('subtitule');\n    subtitule.style.display = isMouseOverTitle.current ? \"none\" : \"block\";\n    isMouseOverTitle.current = !isMouseOverTitle.current \n  }\n\n  return (\n    <div id=\"main-container\">\n      <div onMouseEnter={handleTitleHover} onMouseLeave={handleTitleHover} id=\"title\">\n        <h3>ACTIVIDAD 2 ROUND ROBIN</h3>\n        <span id=\"subtitule\">por: <br/>&emsp;-&ensp;Gerardo Rodriguez Sanchez<br/><br/>&emsp;-&ensp;Luis Antonio Jimenez Mendoza<br/><br/>&emsp;-&ensp;Luis Elogio (aka el foris)</span>\n      </div>\n      <div id=\"graphic-container\">\n        <div id=\"colors-legend\"></div>\n        <canvas id=\"graphic\"></canvas>\n      </div>\n      <div id=\"info-container\">\n        <div className=\"infoblock\">\n          <span className=\"infoblock-title\">Information</span>\n          <div className=\"infoblock-labels\">\n            <span id=\"time-il\" className=\"infoblock-label\">Tiempo:</span>\n            <span id=\"quantum-il\" className=\"infoblock-label\">Quantum: {general_quantum}</span>\n            <span id=\"proceso-il\" className=\"infoblock-label\">Proceso:</span>\n            <span id=\"progress-il\" className=\"infoblock-label\">Progreso:</span>\n          </div>\n        </div>\n      </div>\n      <div id=\"controls-container\">\n        <i onClick={HandelStartClick} id=\"play-control\" className={`fas fa-${cpu_state === cpu_states.FREE ? 'play' : 'pause'}`}></i>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}