{"version":3,"sources":["clases/Point.js","enums.js","clases/Process.js","clases/Queue.js","clases/PriorityQueue.js","clases/MultiLevelQueue.js","App.js","serviceWorker.js","index.js"],"names":["Point","x","y","offset","dx","dy","X","Y","this","colors","schualding_algorithms","processing_states","cpu_states","Process","coords","process_name","updateProgress","progress","speed","status","name","procesess","random_generator","constant","random_number","Math","random","floor","QNode","content","next","previous","CircularQueue","enqueue","new_node","start","end","length","peek","circularDequeue","front","clear","isEmpty","dequeue","PQNode","priority","PQueue","_top","_length","current_node","top_node","message","MLQueue","levels","setLevels","levels_list","forEach","l","color","queue","Pqueue","value","label","levels_labels","Object","keys","App","isMouseOverTitle","useRef","componentDidMount","processes_list","stopped","component_data","start_processing_time","procsessing_queue","procsessing_pqueue","multi_level_queue","useState","fcount","useFcount","scheduling_algorithm","cpu_state","useCpuState","useEffect","current","canvas","document","getElementById","h","push","width","increase_factor","getContext","clearRect","height","drawProcesses","getCurrentAlgorithm","getRangedRandom","ceil","dequeueProcessSafly","pqueue","process","updateInformation","data","time_element","process_element","progress_element","innerText","Date","now","total","toFixed","getAssigneTitle","algorithm_code","new_title","startShortestFirst","a","p_list","processes_to_add","current_process","HandelStartClick","Promise","resolve","setTimeout","startShortestRemaingFirst","processes_added","cicles_elapsed","console","log","startMultiLevelQueue","current_process_info","process_label","undefined","func","startRoundRobin","alert","HandelAlgorithmOptionClick","e","element","target","parseInt","getAttribute","querySelector","stop","new_state","sort","b","elapsed_counts","active_color","canvas_context","p","strokeStyle","getProcessColor","beginPath","rect","stroke","fillStyle","fillRect","handleTitleHover","style","display","id","onMouseEnter","onMouseLeave","className","onClick","algorithmValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4521db6e.chunk.js","sourcesContent":["class Point\r\n{\r\n    constructor( x, y)\r\n    {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n\r\n    offset = ( dx, dy) => {\r\n        this.X += dx;\r\n        this.Y += dy;\r\n    }\r\n}\r\n\r\nexport default Point;","export const colors = {\r\n    MAIN_COLOR: \"#282c34\",\r\n    DARK_BACKGROUND: \"#161616\",\r\n    LIGHT_BACKGROUND: \"#888888\",\r\n    ROSE: \"#d10050\",\r\n    HOVER_ROSE: \"#e9206d\",\r\n    CYAN: \"#00cee9\",\r\n    GREEN: \"#4bd84b\",\r\n    HIGH: \"#ff0000\",\r\n    MID: \"#ffee00\",\r\n    LOW: \"#11ff00\"\r\n}\r\n\r\nexport const schualding_algorithms = {\r\n    ROUND_ROBIN: 0,\r\n    SHORTEST_FIRST: 1,\r\n    SHORTEST_REMAING_FIRST: 2,\r\n    MULTI_LEVEL_QUEUE: 3\r\n}\r\n\r\nexport const processing_states = {\r\n    CREATED: 0,\r\n    ADDED: 1,\r\n    PROCESSING: 2,\r\n    FINISHED: 3\r\n}\r\n\r\nexport const cpu_states = {\r\n    FREE: 0,\r\n    BUSY: 1\r\n}","import Point from './Point';\r\nimport { processing_states } from '../enums';\r\n\r\nclass Process\r\n{\r\n    static procesess = 0;\r\n\r\n    static random_generator = (constant=100) => {\r\n        let random_number = Math.random() * constant;\r\n        return random_number >= 10 ?  Math.floor(random_number) : 10;\r\n    }\r\n\r\n    constructor( coords, process_name=null)\r\n    {\r\n        this.progress = 0;\r\n        this.status = processing_states.CREATED;\r\n        this.name = process_name !== null ? process_name : `Proceso ${Process.procesess++}`;\r\n        this.speed = Process.random_generator();\r\n        this.coords = new Point(coords.x, coords.y);\r\n    }\r\n\r\n    updateProgress = () => {\r\n        this.progress++;\r\n        if(this.progress === this.speed)\r\n        {\r\n            this.status = processing_states.FINISHED;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Process;","class QNode{\r\n    constructor(content, next=null, previous=null)\r\n    {\r\n        this.content = content;\r\n        this.next = next;\r\n        this.previous = previous;\r\n    }\r\n}\r\n\r\nclass CircularQueue\r\n{\r\n    constructor()\r\n    {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue = content => {\r\n        const new_node = new QNode(content);\r\n        if(this.start === null)\r\n        {\r\n            this.start = new_node;\r\n            this.end = new_node;\r\n        }\r\n        else\r\n        {\r\n            new_node.next = this.end;\r\n            this.end.previous = new_node;\r\n            this.end = new_node\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    peek = () => {\r\n        return this.start.content;\r\n    }\r\n\r\n    circularDequeue = () => {\r\n        if(this.start !== null && this.start.previous !== null)\r\n        {\r\n            const front = this.start;\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            this.end.previous = front;\r\n            front.next = this.end;\r\n            front.previous = null;\r\n            this.end = front;\r\n            return front.content;\r\n        }\r\n        else if(this.start.previous === null)\r\n        {\r\n            return this.start.content;\r\n        }\r\n    }\r\n\r\n    clear = () => {\r\n        this.start = null;\r\n        this.end = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    isEmpty = () => {\r\n        return this.start === null;\r\n    }\r\n\r\n    dequeue = () => {\r\n        const front = this.start;\r\n        if(front.previous === null)\r\n        {\r\n            this.start = null;\r\n            this.end = null;\r\n            return front.content;\r\n        }\r\n        else if(this.start !== null)\r\n        {\r\n            this.start = this.start.previous\r\n            this.start.next = null;\r\n            return front.content;\r\n        }\r\n        this.length += this.length === 0 ? 0 : 1;\r\n    }\r\n}\r\n\r\nexport default CircularQueue;","class PQNode{\r\n    constructor(content, priority, previous=null)\r\n    {\r\n        this.content = content;\r\n        this.priority = priority;\r\n        this.previous = previous;\r\n    }\r\n}\r\n\r\nclass PQueue{\r\n    constructor()\r\n    {\r\n        this._top = null;\r\n        this._length = 0;\r\n    }\r\n\r\n    peek = () => {\r\n        return this._top;\r\n    }\r\n\r\n    get length() {\r\n        return this._length;\r\n    }\r\n\r\n    enqueue = (content, priority) => {\r\n        const new_node = new PQNode(content, priority);\r\n        if(this._length > 0)\r\n        {\r\n            let current_node = this._top;\r\n            if ( current_node.priority > new_node.priority)\r\n            {   \r\n                this._top = new_node;\r\n                new_node.previous = current_node;\r\n\r\n            }\r\n            else \r\n            {                \r\n                while( true )\r\n                {\r\n                    if(current_node.previous === null || current_node.previous.priority > new_node.priority)\r\n                    {\r\n                        new_node.previous = current_node.previous;\r\n                        current_node.previous = new_node;\r\n                        break;\r\n                    }\r\n                    current_node = current_node.previous\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this._top = new_node;\r\n        }\r\n        this._length++;\r\n    }\r\n\r\n    dequeue = () => {\r\n        if(this._top !== null)\r\n        {\r\n            const top_node = this._top;\r\n            this._top = this._top.previous;\r\n            this._length--;\r\n            return top_node;\r\n        }\r\n        throw {name: \"PQError\",message: \"trying to dequeue from an empty queue\"};\r\n    }\r\n\r\n    clear = () => {\r\n        this._length = 0;\r\n        this._top = null;\r\n    }\r\n}\r\n\r\nexport default PQueue;","import Pqueue from './PriorityQueue';\r\n\r\nclass MLQueue{\r\n    constructor(levels)\r\n    {\r\n        this.levels = this.setLevels(levels);\r\n        this.length = 0;\r\n    }\r\n\r\n    setLevels = levels_list => {\r\n        const levels = {}\r\n        levels_list.forEach(l => {\r\n            levels[l.name] = {\r\n                color: l.color,\r\n                queue: new Pqueue()\r\n            }\r\n        })\r\n        return levels;\r\n    }\r\n\r\n    enqueue = ( value, priority, label=null) => {\r\n        const levels_labels = Object.keys(this.levels);\r\n        label = label === null ?  levels_labels[Math.floor(Math.random() * (levels_labels.length - 0.1))] : label;\r\n        this.levels[label].queue.enqueue(value, priority);\r\n        this.length++;\r\n    }\r\n\r\n    dequeue = () => {\r\n        for(let label of Object.keys(this.levels))\r\n        {\r\n            if(this.levels[label].queue.length > 0)\r\n            {\r\n                this.length--;\r\n                return {\r\n                    value: this.levels[label].queue.dequeue().content,\r\n                    label: label\r\n                }\r\n            }\r\n        }\r\n        throw { name:\"MLQueueError\", message: \"No level has any process left\"};\r\n    }\r\n\r\n    peek = () => {\r\n        for(let label of Object.keys(this.levels))\r\n        {\r\n            if(this.levels[label].queue.length > 0)\r\n            {\r\n                return {\r\n                    value: this.levels[label].queue.peek(),\r\n                    label: label\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default MLQueue;","import React, { useRef, useEffect, useState } from 'react';\nimport Process from './clases/Process';\nimport CircularQueue from './clases/Queue';\nimport PQueue from './clases/PriorityQueue';\nimport MLQueue from './clases/MultiLevelQueue';\nimport { colors, processing_states, cpu_states, schualding_algorithms } from './enums';\nimport './App.css';\n\nfunction App() {\n  const isMouseOverTitle = useRef(false);\n  const componentDidMount = useRef(false);\n  const processes_list = useRef([]);\n  const stopped = useRef(false);\n  const component_data = useRef({\n    start_processing_time: 0\n  })\n  // const waiter = useRef(new Worker('./workers/waiter.js'));\n  // waiter.current.onmessage()\n  const procsessing_queue = useRef(new CircularQueue());\n  const procsessing_pqueue = useRef(new PQueue());\n  const multi_level_queue = useRef(new MLQueue([{name: 'high', color: colors.HIGH}, {name: 'mid', color: colors.MID}, {name: 'low', color: colors.LOW}]));\n  const [ fcount, useFcount ] = useState(0);\n  const general_quantum = 20; //this number represents seconds\n  const scheduling_algorithm = useRef(schualding_algorithms.MULTI_LEVEL_QUEUE);\n  const [ cpu_state, useCpuState ] = useState(cpu_states.FREE);\n\n  \n  useEffect(() => {\n    if(!componentDidMount.current)\n    {\n      // componentDidMount behavior\n      const canvas = document.getElementById(\"graphic\");\n      componentDidMount.current = true;\n      const increase_factor = 70,\n            coords = { x: increase_factor, y: 130};\n      processes_list.current = [];\n      for(let h=0; h < 20; h++)\n      {\n        processes_list.current.push(new Process(coords));\n        coords.x +=  increase_factor;\n      }\n      // console.log(processes_list.current);\n      canvas.width = processes_list.current.length * increase_factor + (increase_factor * 2);\n      const canvas_context = canvas.getContext('2d');\n      canvas_context.clearRect(0, 0, canvas.width, canvas.height);\n      drawProcesses(canvas);\n    }\n    if(cpu_state === cpu_states.BUSY)\n    {\n      getCurrentAlgorithm()();\n    }\n  })\n\n  const getProcessColor = process => {\n    switch(process.status){\n      case processing_states.CREATED:\n        return colors.LIGHT_BACKGROUND;\n      case processing_states.ADDED:\n        return colors.CYAN;\n      case processing_states.PROCESSING:\n        return colors.ROSE;\n      case processing_states.FINISHED:\n        return colors.GREEN;\n      default:\n        return colors.MAIN_COLOR;\n    }\n  }\n\n  const getRangedRandom = constant => {\n    return Math.ceil(Math.random()*constant);\n  }\n\n  const dequeueProcessSafly = pqueue => {\n    let process = null;\n    do{\n      if(!pqueue.isEmpty())\n      {\n        if(pqueue.peek().status !== processing_states.FINISHED)\n        {\n          process = pqueue.circularDequeue();\n        }\n        else\n        {\n          process = pqueue.dequeue();\n        }\n      }\n      else{\n        return false;\n      } \n    }while( process.status === processing_states.FINISHED)\n    return process;\n  }\n\n  const updateInformation = data => {\n    const { start_processing_time } = component_data.current;\n    const time_element = document.getElementById('time-il'),\n          process_element = document.getElementById(\"proceso-il\"),\n          progress_element  = document.getElementById(\"progress-il\");\n    time_element.innerText = `  Tiempo: ${Math.floor((Date.now()-start_processing_time)/1000)}s`;\n    process_element.innerText = ` Proceso: ${data.process_name}`;\n    progress_element.innerText = `  Progreso: ${(data.progress/data.total*100).toFixed(1)}%`;\n  }\n\n  const getAssigneTitle = algorithm_code => {\n    let new_title = \"\";\n    switch(algorithm_code)\n    {\n      case schualding_algorithms.ROUND_ROBIN:\n        new_title = \"ACTIVIDAD 2 ROUND ROBIN\";\n        break;\n      case schualding_algorithms.SHORTEST_FIRST:\n        new_title = \"ACTIVIDAD 3 SHORTEST FIRST\";\n        break;\n      case schualding_algorithms.SHORTEST_REMAING_FIRST:\n        new_title = \"ACTIVIDAD 4 SHORTEST REMAING FIRST\";\n        break;\n      case schualding_algorithms.MULTI_LEVEL_QUEUE:\n        new_title = \"ACTIVIDAD 5 MULTI LEVEL QUEUE\";\n        break;\n      default:\n        new_title = \"TAREA RANDOM\";\n        break;\n    }\n    return new_title;\n  }\n\n  const startShortestFirst = async () => {\n    const { current:p_list } = processes_list;\n    if(stopped.current)\n    {\n      stopped.current = false;\n      return;\n    }\n    if(procsessing_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && procsessing_queue.current.length !== p_list.length)\n      {\n        p_list[procsessing_queue.current.length].status = processing_states.ADDED;\n        procsessing_queue.current.enqueue(p_list[procsessing_queue.current.length]);\n        processes_to_add--;\n      }\n    }\n    let current_process = dequeueProcessSafly(procsessing_queue.current);\n    if (current_process === false)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    current_process.status = processing_states.PROCESSING;\n    while(current_process.status !== processing_states.FINISHED)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      current_process.updateProgress();\n      drawProcesses();\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    current_process.status = current_process.status !== processing_states.FINISHED ? processing_states.ADDED : current_process.status;\n    return startShortestFirst();\n  }\n\n  const startShortestRemaingFirst = async (processes_added=0) => {\n    const { current:p_list } = processes_list;\n\n    if(stopped.current)\n    {\n      stopped.current = false;\n\n      return;\n    }\n\n    if(procsessing_pqueue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && processes_added !== p_list.length)\n      {\n        p_list[processes_added].status = processing_states.ADDED;\n        procsessing_pqueue.current.enqueue(p_list[processes_added], p_list[processes_added].speed - p_list[processes_added].progress);\n        processes_to_add--;\n        processes_added++;\n      }\n    }\n    if (procsessing_pqueue.current._length === 0)\n    {\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    let current_process = procsessing_pqueue.current.dequeue().content;\n    current_process.status = processing_states.PROCESSING;\n    let cicles_elapsed = 15;\n    while(cicles_elapsed > 0 && current_process.status !== processing_states.FINISHED)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      current_process.updateProgress();\n      drawProcesses();\n      cicles_elapsed--;\n      console.log(cicles_elapsed);\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    if (current_process.status !== processing_states.FINISHED)\n    {\n      current_process.status = processing_states.ADDED;\n      procsessing_pqueue.current.enqueue(current_process, current_process.speed - current_process.progress)\n    }\n    return startShortestRemaingFirst(processes_added);\n  }\n\n  const startMultiLevelQueue = async (processes_added=0) => {\n    const { current:p_list } = processes_list;\n\n    if(stopped.current)\n    {\n      stopped.current = false;\n\n      return;\n    }\n\n    if(multi_level_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && processes_added !== p_list.length)\n      {\n        p_list[processes_added].status = processing_states.ADDED;\n        multi_level_queue.current.enqueue(p_list[processes_added], p_list[processes_added].speed - p_list[processes_added].progress);\n        processes_to_add--;\n        processes_added++;\n      }\n    }\n    if (multi_level_queue.current.length === 0)\n    {\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    let current_process_info = multi_level_queue.current.dequeue();\n    const current_process = current_process_info.value,\n          process_label = current_process_info.label;\n    current_process.status = processing_states.PROCESSING;\n    let cicles_elapsed = 15;\n    while(cicles_elapsed > 0 && current_process.status !== processing_states.FINISHED)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      current_process.updateProgress();\n      drawProcesses(undefined, multi_level_queue.current.levels[process_label].color);\n      cicles_elapsed--;\n      console.log(cicles_elapsed);\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    if (current_process.status !== processing_states.FINISHED)\n    {\n      current_process.status = processing_states.ADDED;\n      multi_level_queue.current.enqueue(current_process, current_process.speed - current_process.progress, process_label)\n    }\n    return startMultiLevelQueue(processes_added);\n  }\n\n\n  const getCurrentAlgorithm = () => {\n    const { current:algorithm_code } = scheduling_algorithm;\n    let func;\n    switch(algorithm_code)\n    {\n      case schualding_algorithms.ROUND_ROBIN:\n        func = startRoundRobin;\n        break;\n      case schualding_algorithms.SHORTEST_FIRST:\n        func = startShortestFirst;\n        break;\n      case schualding_algorithms.SHORTEST_REMAING_FIRST:\n        func = startShortestRemaingFirst;\n        break;\n      case schualding_algorithms.MULTI_LEVEL_QUEUE:\n        func = startMultiLevelQueue;\n        break;\n      default:\n        func = () => alert(\"puto el que lo lea\");\n        break;\n    } \n    return func;\n  }\n\n  const HandelAlgorithmOptionClick = e => {\n    const element = e.target;\n    const algorithm_code = parseInt(element.getAttribute('algorithmvalue'));\n    scheduling_algorithm.current = algorithm_code;\n    document.querySelector(\"#title h3\").innerText = getAssigneTitle(algorithm_code);\n    useFcount(fcount+1)\n  }\n\n  const HandelStartClick = (stop=true) => {\n    const new_state = cpu_state === cpu_states.FREE ? cpu_states.BUSY : cpu_states.FREE;\n    procsessing_pqueue.current.clear();\n    if(procsessing_queue.current.length !== 0)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n    }\n    if(scheduling_algorithm.current === schualding_algorithms.SHORTEST_FIRST)\n    {\n      processes_list.current.sort((a,b) =>  a.speed - b.speed);\n    }\n\n    if(new_state === cpu_states.BUSY)\n    {\n      component_data.current.start_processing_time = Date.now();\n    }\n    else if(stop) {\n      stopped.current = true;\n    }\n    useCpuState(new_state);\n  }\n\n  const startRoundRobin = async () => {\n    const { current:p_list } = processes_list;\n    if(stopped.current)\n    {\n      stopped.current = false;\n      return;\n    }\n    if(procsessing_queue.current.length < p_list.length)\n    {\n      // Adds new process to the processing queue\n\n      let processes_to_add = getRangedRandom(2);\n\n      while(processes_to_add > 0 && procsessing_queue.current.length !== p_list.length)\n      {\n        p_list[procsessing_queue.current.length].status = processing_states.ADDED;\n        procsessing_queue.current.enqueue(p_list[procsessing_queue.current.length]);\n        processes_to_add--;\n      }\n    }\n    let current_process = dequeueProcessSafly(procsessing_queue.current);\n    if (current_process === false)\n    {\n      procsessing_queue.current.clear();\n      componentDidMount.current = false;\n      return HandelStartClick(false);\n    }\n    current_process.status = processing_states.PROCESSING;\n    let elapsed_counts = 0;\n    while(elapsed_counts < general_quantum)\n    {\n      updateInformation({\n        total: current_process.speed,\n        progress: current_process.progress,\n        process_name: current_process.name\n\n      })\n      if(current_process.status !== processing_states.FINISHED)\n      {\n        current_process.updateProgress();\n      }\n      elapsed_counts++;\n      drawProcesses();\n      await new Promise(resolve => setTimeout(resolve, 20));\n    }\n    current_process.status = current_process.status !== processing_states.FINISHED ? processing_states.ADDED : current_process.status;\n    return startRoundRobin();\n  }\n\n  const drawProcesses = ( canvas, active_color) => {\n    active_color = undefined === active_color ? colors.ROSE : active_color;\n    canvas = canvas === undefined ? document.getElementById(\"graphic\") : canvas;\n    const canvas_context = canvas.getContext('2d');\n    processes_list.current.forEach(p => {\n      canvas_context.strokeStyle = p.status !== processing_states.PROCESSING ?  getProcessColor(p) : active_color;\n      canvas_context.beginPath();\n      canvas_context.rect(p.coords.X, (p.coords.Y - p.speed), 30, p.speed);\n      canvas_context.stroke();\n      if(p.progress > 0)\n      {\n        canvas_context.fillStyle = canvas_context.strokeStyle;\n        canvas_context.fillRect(p.coords.X, (p.coords.Y - p.speed), 30, p.progress);\n      }\n    })\n  }\n\n  const handleTitleHover = e => {\n    const subtitule = document.getElementById('subtitule');\n    subtitule.style.display = isMouseOverTitle.current ? \"none\" : \"block\";\n    isMouseOverTitle.current = !isMouseOverTitle.current \n  }\n\n  const getColorInfo = () =>  scheduling_algorithm.current !== schualding_algorithms.MULTI_LEVEL_QUEUE ? undefined : (\n    <div className=\"infoblock\">\n      <span className=\"infoblock-title\">Color Legend</span>\n      <div className=\"infoblock-labels\">\n        <span style={{color:colors.HIGH}} id='high-priority' className=\"infoblock-label\">High priority</span>\n        <span style={{color:colors.MID}} id='mid-priority' className=\"infoblock-label\">Mid priority</span>\n        <span style={{color:colors.LOW}} id='low-priority' className=\"infoblock-label\">Low priority</span>\n      </div>\n    </div>\n  ) \n\n  return (\n    <div id=\"main-container\">\n      <div onMouseEnter={handleTitleHover} onMouseLeave={handleTitleHover} id=\"title\">\n        <h3>{getAssigneTitle(scheduling_algorithm.current)}</h3>\n        <span id=\"subtitule\">por: <br/>&emsp;-&ensp;Gerardo Rodriguez Sanchez<br/><br/>&emsp;-&ensp;Luis Antonio Jimenez Mendoza<br/><br/>&emsp;-&ensp;Luis Elogio (aka el foris)</span>\n      </div>\n      <div id=\"graphic-container\">\n        <div id=\"colors-legend\"></div>\n        <canvas id=\"graphic\"></canvas>\n      </div>\n      <div id=\"info-container\">\n        <div className=\"infoblock\">\n          <span className=\"infoblock-title\">Information</span>\n          <div className=\"infoblock-labels\">\n            <span id=\"time-il\" className=\"infoblock-label\">Tiempo:</span>\n            <span id=\"quantum-il\" className=\"infoblock-label\">Quantum: {general_quantum}</span>\n            <span id=\"proceso-il\" className=\"infoblock-label\">Proceso:</span>\n            <span id=\"progress-il\" className=\"infoblock-label\">Progreso:</span>\n          </div>\n        </div>\n        <div className=\"infoblock\" id=\"algorithms-selector\">\n          <span className=\"infoblock-title\">Algoritmos</span>\n          <div className=\"infoblock-labels\">\n            <div onClick={HandelAlgorithmOptionClick} algorithmValue={schualding_algorithms.ROUND_ROBIN} className=\"infoblock-label algorithm-option\">round robin</div>\n            <div onClick={HandelAlgorithmOptionClick} algorithmValue={schualding_algorithms.SHORTEST_FIRST} className=\"infoblock-label algorithm-option\">shortest first</div>\n            <div onClick={HandelAlgorithmOptionClick} algorithmValue={schualding_algorithms.SHORTEST_REMAING_FIRST} className=\"infoblock-label algorithm-option\">shortest remaing first</div>\n            <div onClick={HandelAlgorithmOptionClick} algorithmValue={schualding_algorithms.MULTI_LEVEL_QUEUE} className=\"infoblock-label algorithm-option\">multi level queue</div>\n          </div>\n        </div>\n        {getColorInfo()}\n      </div>\n      <div id=\"controls-container\">\n        <i onClick={HandelStartClick} id=\"play-control\" className={`fas fa-${cpu_state === cpu_states.FREE ? 'play' : 'pause'}`}></i>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}